cmake_minimum_required (VERSION 3.9)


project ("ImaGL")

option(BUILD_TEST "Build test program" OFF)
option(STATIC_LIB "Build ImaGL as a static library" OFF)
option(SUPPORT_PNG "Build ImaGL with PNG file format support" ON)

# Generate conanfile.txt from current cmake cache configuration
file(STRINGS conanfile.in CONANFILE)
file(WRITE "${CMAKE_BINARY_DIR}/conanfile.txt" "# Do not modify this file, it is automatically generated by CMake\n")
foreach(CONANFILE_LINE ${CONANFILE})
	#Test for new section
	string(REGEX MATCH [[^[ \t\r\n]*\[]] THISLINE ${CONANFILE_LINE})
	if(THISLINE)
		string(PREPEND CONANFILE_LINE "\n")
	endif()
	#Test for libPNG
	string(REGEX MATCH [[^.*libpng]] THISLINE ${CONANFILE_LINE})
	if(THISLINE AND NOT SUPPORT_PNG)
		string(PREPEND CONANFILE_LINE "# ")
	endif()
	#Test for catch2 (for testing)
	string(REGEX MATCH [[^.*catch2]] THISLINE ${CONANFILE_LINE})
	if(THISLINE AND NOT BUILD_TEST)
		string(PREPEND CONANFILE_LINE "# ")
	endif()

	file(APPEND "${CMAKE_BINARY_DIR}/conanfile.txt" "${CONANFILE_LINE}\n")
endforeach()

# Execute conan to install dependencies in Release and / or Debug mode
get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(is_multi_config)
	message("Multi config generator")
	execute_process(COMMAND conan install "${CMAKE_BINARY_DIR}" -s build_type=Debug -if "${CMAKE_BINARY_DIR}" -g cmake_multi)
	execute_process(COMMAND conan install "${CMAKE_BINARY_DIR}" -s build_type=Release -if "${CMAKE_BINARY_DIR}" -g cmake_multi)
	# execute_process(COMMAND conan install "${CMAKE_BINARY_DIR}" -s build_type=MinSizeRel -if "${CMAKE_BINARY_DIR}" -g cmake_multi)
	# execute_process(COMMAND conan install "${CMAKE_BINARY_DIR}" -s build_type=RelWithDebInfo -if "${CMAKE_BINARY_DIR}" -g cmake_multi)
else()
	message("Build type : ${CMAKE_BUILD_TYPE}")
	execute_process(COMMAND conan install "${CMAKE_BINARY_DIR}" -s build_type=${CMAKE_BUILD_TYPE} -if "${CMAKE_BINARY_DIR}")
endif()

if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
    include(${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
else()
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
endif()
conan_basic_setup(TARGETS)

# if(SUPPORT_PNG)
# 	find_package(PNG REQUIRED CONFIG)
# endif()

set(CMAKE_DEBUG_POSTFIX d)

# Incluez les sous-projets.
add_subdirectory ("ImaGL")

if(BUILD_TEST)
	#find_package(Catch2 REQUIRED CONFIG)
	add_subdirectory ("test")
endif()